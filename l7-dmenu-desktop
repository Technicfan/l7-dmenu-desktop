#!/bin/bash

if [[ $1 = "--help" || $1 = "-h" ]]
then
    printf '%s\n' "Use --dmenu=<menu> to change menu command" \
                "When not using --dmenu= flag arguments are passed to regular dmenu"\
                    "instead of your desired prompt write ~prompt~ without \' or \""
    exit 0
fi

cachedir="$HOME/.cache/l7-dmenu-desktop"
configdir="$HOME/.config/l7-dmenu-desktop"
lockfile_aliases="$cachedir/lock_aliases"
lockfile_desktop="$cachedir/lock_desktop"
aliasesfile="$configdir/aliases"
excludefile="$configdir/excludes"
configfile="$configdir/config"
lang=$(echo "$LANG" | awk -F "_" '{print $1}')
aliasescache="$cachedir/aliases"
aliasesnamecache="$cachedir/names_aliases"
aliasesfile="$configdir/aliases"
filecaches=(
	"$cachedir/files_global"
	"$cachedir/files_global_local"
	"$cachedir/files_local"
	"$cachedir/files_flatpak_global"
	"$cachedir/files_flatpak_local"
)
namecaches=(
    "$cachedir/names_global"
    "$cachedir/names_global_local"
    "$cachedir/names_local"
    "$cachedir/names_flatpak_global"
    "$cachedir/names_flatpak_local"
)
desktopdirs=(
    "/usr/share/applications"
    "/usr/local/share/applications"
    "$HOME/.local/share/applications"
    "/var/lib/flatpak/exports/share/applications"
    "$HOME/.local/flatpak/exports/share/applications"
)

dmenu_desktop()
{
    get_desktop_name()
    {
        entry=$(sed -n '/\[Desktop Entry\]/,/^\[/p' "$1")
        if [[ -n $entry ]] && \
        ! grep -q "^NoDisplay=true" <(echo "${entry[@]}") && \
        ! grep -q "^Hidden=true" <(echo "${entry[@]}") && \
            grep -q "^Type=Application" <(echo "${entry[@]}")
        then
            if grep -q "^Name\[$2\]=" <(echo "${entry[@]}")
            then
                name=$(awk -F "=" '{print $2}' <(grep "^Name\[$2\]=" <(echo "${entry[@]}")))
            else
                name=$(awk -F "=" '{print $2}' <(grep "^Name=" <(echo "${entry[@]}")))
            fi
            if [[ -n $name ]]
            then
                echo "$name""; ""$1"
            fi
        fi
    }

    update_desktop()
    {
        if [[ -d "$3" ]]
        then
            if [[ ! -f "$1" || ! -f "$2" ]]
            then
                find "$3" -type f,l -name "*.desktop" > "$1"
                export -f get_desktop_name
                parallel -j12 get_desktop_name :::: "$1" ::: "$4" > "$2"
            elif ! diff -q "$1" <(find "$3" -type f,l -name "*.desktop") >/dev/null 2>&1
            then
                files=$(find "$3" -type f,l -name "*.desktop")
                readarray -t changes < <(diff "$1" <(echo "$files"))
                for change in "${changes[@]}"
                do
                    if [[ "$change" = ">"* ]]
                    then
                        file="${change//> /}"
                        get_desktop_name "$file" "$4" >> "$2"
                    elif [[ "$change" = "<"* ]]
                    then
                        file="$(sed 's/\//\\\//g' <<<"${change//< /}")"
                        sed -i "/$file/d" "$2"
                    fi
                done
                echo "$files" > "$1"
            fi
            awk -F "; " '{print $1}' "$2"
        fi
    }

    touch "$lockfile_desktop"
    for i in "${!desktopdirs[@]}"
    do
        update_desktop "${filecaches[i]}" "${namecaches[i]}" "${desktopdirs[i]}" "$lang" &
        pids+=($!)
    done
    for pid in "${pids[@]}"
    do
        wait "$pid"
    done
    rm "$lockfile_desktop"
}

dmenu_aliases()
{
    get_alias_name()
    {
        if [[ $1 = "alias "*"="* ]]
        then
            echo "${1//alias /}" | awk -F "=" '{print $1}'
        fi
    }

    update_alias()
    {
        if [[ -f "$3" ]]
        then
            if [[ ! -f "$1" || ! -f "$2" ]]
            then
                [[ -f "$2" ]] && rm "$2"
                cp -f "$3" "$1"
                readarray -t aliases < "$1"
                for alias in "${aliases[@]}"
                do
                    get_alias_name "$alias" >> "$2"
                done
            elif ! diff -q "$1" "$3" >/dev/null 2>&1
            then
                readarray -t changes < <(diff "$1" "$3")
                for change in "${changes[@]}"
                do
                    if [[ "$change" = ">"* ]]
                    then
                        alias="${change//> /}"
                        get_alias_name "$alias" >> "$2"
                    elif [[ "$change" = "<"* ]]
                    then
                        alias="${change//< /}"
                        sed -i "/$(get_alias_name "$alias")/d" "$2"
                    fi
                done
                cp -f "$3" "$1"
            fi
            cat "$2"
        fi
    }

    touch "$lockfile_aliases"
    update_alias "$aliasescache" "$aliasesnamecache" "$aliasesfile"
    rm "$lockfile_aliases"
}

main()
{
    checkrunning()
    {
        [[ ! -e "$cachedir" ]] && mkdir "$cachedir"
        if [[ -f "$1" || -f "$2" ]]
        then
            echo "Already running!" >&2
            exit 1
        fi
    }

    execute()
    {
        if [[ -n $1 ]]
        then
            if [[ -f "$aliasesfile" ]] && grep -q "^alias $1=" "$aliasesfile"
            then
                eval "$(sed "s/^alias $1=//g" "$aliasesfile")"
                return
            else
                for namecache in "${namecaches[@]}"
                do
                    if [[ -f "$namecache" ]] && grep -q "^$1;" "$namecache"
                    then
                        dex --term alacritty "$(grep "^$1;" "$namecache" | awk -F "; " '{print $2}' | awk NR==1)" &
                        return
                    fi
                done
            fi
            if ! [[ $1 = ^"~"* ]]
            then
                command="${1:1}"
            else
                command="$1"
            fi
            command -v "$(echo "$command" | awk '{print $1}')" && [[ $(printf "No\nYes" | \
                        eval "${menu//~prompt~/\'${prompt2//~command~/\"$command\"}\'}") = "Yes" ]] && $1
        fi
    }

    exclude()
    {
        list="$2"
        if [[ -f "$1" ]]
        then
            readarray -t excludes < "$1"
            for exclude in "${excludes[@]}"
            do
                list=$(sed "/^$exclude$/d" <(echo "${list[@]}"))
            done
        fi
        echo "${list[@]}"
    }

    info()
    {
        for i in "${!filecaches[@]}"
        do
            if [[ -f "${filecaches[$i]}" ]]
        then
                read=$((read + $(wc -l < "${filecaches[$i]}")))
            fi
            if [[ -f "${namecaches[$i]}" ]]
            then
                found=$((found + $(wc -l < "${namecaches[$i]}")))
            fi
        done
        echo "Read $read .desktop files, found $found apps."
    }

    checkrunning "$lockfile_aliases" "$lockfile_desktop"
    [[ -f "$configfile" ]] && source "$configfile"
    [[ -z "$prompt1" ]] && prompt1="Run:"
    [[ -z "$prompt2" ]] && prompt2="Run ~command~ in bash?"
    echo -ne "looking for changes..." && \
    if [[ $addpath = 1 ]]
    then
        entries=$(exclude "$excludefile" "$( (dmenu_desktop & dmenu_aliases & dmenu_path) 2>/dev/null | sort -u )")
    else
        entries=$(exclude "$excludefile" "$( (dmenu_desktop & dmenu_aliases) 2>/dev/null | sort -u )")
    fi && \
    echo -ne "\r\033[K"
    info &
    if [[ $1 = "--dmenu="* ]]
    then
        menu=${1//--dmenu=/}
    else
        menu="dmenu $*"
    fi
    selection=$(echo "${entries[@]}" | ${menu//~prompt~/$prompt1})
    execute "$selection"
}

main "$@"