#!/bin/bash

cachedir="$HOME/.cache/l7-dmenu-desktop"
configdir="$HOME/.config/l7-dmenu-desktop"
lockfile_aliases="$cachedir/lock_aliases"
lockfile_desktop="$cachedir/lock_desktop"
aliasesfile="$configdir/aliases"
excludefile="$configdir/excludes"
configfile="$configdir/config"
lang=$(echo "$LANG" | awk -F "_" '{print $1}')
aliasescache="$cachedir/aliases"
aliasesnamecache="$cachedir/names_aliases"
appcache="$cachedir/apps"
desktopdirs=(
    "/usr/share/applications"
    "/usr/local/share/applications"
    "$HOME/.local/share/applications"
    "/var/lib/flatpak/exports/share/applications"
    "$HOME/.local/flatpak/exports/share/applications"
)

dmenu_desktop()
{
    get_desktop_name()
    {
        [[ -f "$1" ]] && entry=$(sed -n '/\[Desktop Entry\]/,/^\[/p' "$1")
        if [[ -n $entry ]] && \
        ! grep -q "^NoDisplay=true" <(echo "$entry") && \
        ! grep -q "^Hidden=true" <(echo "$entry") && \
            grep -q "^Type=Application" <(echo "$entry")
        then
            if grep -q "^Name\[$2\]=" <(echo "$entry")
            then
                name=$(awk -F "=" '{print $2}' <(grep "^Name\[$2\]=" <(echo "$entry")))
            else
                name=$(awk -F "=" '{print $2}' <(grep "^Name=" <(echo "$entry")))
            fi
            if [[ -n $name ]]
            then
                echo "$name""; ""$1""; 1"
            else
                echo "hidden; ""$1""; 0"
            fi
        else
            echo "hidden; ""$1""; 0"
        fi
    }

    update_desktop()
    {
        if [[ -d "$2" ]]
        then
            files=$(find "$2" -type f,l -name "*.desktop" | sort -u)
            [[ -f "$1" ]] && cached_files=$(awk -F "; " '{print $2}' "$1" | grep "$2" | sort -u)
            if [[ -z "$cached_files" ]]
            then
                export -f get_desktop_name
                parallel -j12 get_desktop_name ::: "$files" ::: "$3" >> "$1"
            elif [[ "$cached_files" != "$files" ]]
            then
                notify-send "noob"
                readarray -t changes < <(diff <(echo "$cached_files") <(echo "$files"))
                for change in "${changes[@]}"
                do
                    if [[ "$change" = ">"* ]]
                    then
                        file="${change//> /}"
                        get_desktop_name "$file" "$3" >> "$1"
                    elif [[ "$change" = "<"* ]]
                    then
                        file="$(sed 's/\//\\\//g' <<<"${change//< /}")"
                        name="$(grep "$file" "$1" | awk -F "; " '{print $1}')"
                        sed -i "/; $file; /d" "$1"
                        sed -i "s/$name ([0-9])/$name/g" "$1"
                    fi
                done
            fi
        fi
    }

    touch "$lockfile_desktop"
    for i in "${!desktopdirs[@]}"
    do
        update_desktop "$appcache" "${desktopdirs[i]}" "$lang" &
        pids+=($!)
    done
    for pid in "${pids[@]}"
    do
        wait "$pid"
    done
    awk -i inplace -F "; " '
    {
        count[$1]++
        if (count[$1] == 1 || $1 == "hidden") {
            print $0
        } else {
            print $1 " (" count[$1]-1 "); " $2 "; " $3
        }
    }
    ' "$appcache"
    grep "; 1$" "$appcache" | awk -F "; " '{print $1}'
    rm "$lockfile_desktop"
}

dmenu_aliases()
{
    get_alias_name()
    {
        if [[ $1 = "alias "*"="* ]]
        then
            echo "${1//alias /}" | awk -F "=" '{print $1}'
        fi
    }

    update_alias()
    {
        if [[ -f "$3" ]]
        then
            if [[ ! -f "$1" || ! -f "$2" ]]
            then
                [[ -f "$2" ]] && rm "$2"
                cp -f "$3" "$1"
                readarray -t aliases < "$1"
                for alias in "${aliases[@]}"
                do
                    get_alias_name "$alias" >> "$2"
                done
            elif ! diff -q "$1" "$3" >/dev/null 2>&1
            then
                readarray -t changes < <(diff "$1" "$3")
                for change in "${changes[@]}"
                do
                    if [[ "$change" = ">"* ]]
                    then
                        alias="${change//> /}"
                        get_alias_name "$alias" >> "$2"
                    elif [[ "$change" = "<"* ]]
                    then
                        alias="${change//< /}"
                        sed -i "/$(get_alias_name "$alias")/d" "$2"
                    fi
                done
                cp -f "$3" "$1"
            fi
            cat "$2"
        fi
    }

    touch "$lockfile_aliases"
    update_alias "$aliasescache" "$aliasesnamecache" "$aliasesfile"
    rm "$lockfile_aliases"
}

main()
{
    checkrunning()
    {
        [[ ! -e "$cachedir" ]] && mkdir "$cachedir"
        if [[ -f "$1" || -f "$2" ]]
        then
            echo "Already running!" >&2
            exit 1
        fi
    }

    execute()
    {
        if [[ -n $1 ]]
        then
            if [[ -f "$aliasesfile" ]] && grep -q "^alias $1=" "$aliasesfile"
            then
                eval "$(sed "s/^alias $1=//g" "$aliasesfile")"
                return
            else
                if [[ -f "$appcache" ]] && grep -q "^$1;" "$appcache"
                then
                    dex --term alacritty "$(grep "^$1;" "$appcache" | awk -F "; " '{print $2}')" &
                    return
                fi
            fi
            if [[ $1 = $"~"* ]]
            then
                command="${1:1}"
            else
                command=$1
            fi
            if command -v "$(echo "$command" | awk '{print $1}')"
            then
                [[ $(printf "No\nYes" | eval "${menu//~prompt~/\'${prompt2//~command~/\"$command\"}\'}") = "Yes" ]] && $command
            else
                notify-send -a "l7-dmenu-desktop_error" "Invalid command"
                $0 "$2"
            fi
        fi
    }

    exclude()
    {
        list="$2"
        if [[ -f "$1" ]]
        then
            readarray -t excludes < "$1"
            for exclude in "${excludes[@]}"
            do
                list=$(sed "/^$exclude$/d" <(echo "${list[@]}"))
            done
        fi
        echo "${list[@]}"
    }

    for arg in "$@"
    do
        case $arg in
        -h|--help)
            printf '%s\n' "Use --dmenu=<menu> to change menu command" \
                "When not using --dmenu= flag arguments are passed to regular dmenu"\
                    "instead of your desired prompt write ~prompt~ without \' or \""
            exit 0
            ;;
        --dmenu=*)
            menu=${arg//--dmenu=/}
            ;;
        --clear)
            rm "$aliasescache"
            rm "$aliasesnamecache"
            rm "$appcache"
            c=1
            ;;
        esac
    done

    checkrunning "$lockfile_aliases" "$lockfile_desktop"
    [[ -f "$configfile" ]] && source "$configfile"
    [[ -z "$prompt1" ]] && prompt1="Run:"
    [[ -z "$prompt2" ]] && prompt2="Run ~command~ with bash?"
    echo -ne "looking for changes..." && \
    if [[ $addpath = 1 ]]
    then
        entries=$(exclude "$excludefile" "$( (dmenu_desktop & dmenu_aliases & dmenu_path) 2>/dev/null )")
    else
        entries=$(exclude "$excludefile" "$( (dmenu_desktop & dmenu_aliases) 2>/dev/null )")
    fi && \
    echo -ne "\r\033[K"
    echo "Read $(wc -l < "$appcache") .desktop files, found $(wc -l < <(grep "; 1$" "$appcache")) apps." &
    if [[ -z "$menu" ]]
    then
        if [[ $c = 1 ]]
        then
            menu="dmenu ${*//--clear/}"
        else
            menu="dmenu $*"
        fi
    fi
    selection=$(echo "${entries[@]}" | sort -u | ${menu//~prompt~/$prompt1})
    execute "$selection" "$*"
}

main "$@"